version: "3.9"

services:
  # Postgres DB
  db:
    container_name: "postgres"
    image: "postgres:latest"
    restart: "always" # Forces a container restart if it stops for some reason
    environment:
      # ENV setup, TODO make it secret
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # Postgres needs ports hence we expose them
    ports:
      # Format note: port on machine:port on container
      - "5432:5432"
    # Volume is a persistence mechanism within docker
    volumes:
      - "postgres:/var/lib/postgres/data"
    networks:
      - "go-app-network"

  # Extra service that provides a web UI to connect to our DB
  adminer:
    container_name: "adminer"
    image: "adminer:latest"
    restart: "always"
    environment:
      ADMINER_DESIGN: "dracula"
    ports:
      - "3333:8080"
    networks:
      - "go-app-network"

  web:
    container_name: "go-app"
    build: 
      context: "./" # folder
      dockerfile: "dockerfile"
    ports:
      - "2228:2228"
    depends_on:
      # web needs db to be accepting connections to start
      db:
        condition: "service_started" # DB is ready to accept connections
        restart: true # restart web when DB is ready
    # Volumes are needed for hot reload to work
    volumes:
      # map dir where compose.yaml is to app dir defined as workdir in dockerfile
      - "./:/app"
    networks:
      - "go-app-network"


volumes:
  postgres:

networks:
  go-app-network:
